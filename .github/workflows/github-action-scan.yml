name: Comprehensive Code Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  security-events: write

jobs:
  semgrep-sast:
    name: Semgrep (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep Scan
        run: |
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan --config auto --error --json > semgrep-results.json || true
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan --config auto --error --sarif > semgrep-results.sarif || true
      - name: Upload Semgrep SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep-sast
      - name: Upload JSON Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results-json
          path: semgrep-results.json

  snyk-sast:
    name: Snyk (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create results directory
        run: mkdir -p snyk-results
      - name: Run Snyk SAST Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker run --rm -v "$(pwd):/project" -e SNYK_TOKEN \
            --entrypoint="" snyk/snyk:linux sh -c "
              set -e
              cd /project && \
              snyk auth $SNYK_TOKEN && \
              snyk code test --json-file-output=snyk-results/snyk-sast.json --sarif-file-output=snyk-results/snyk-sast.sarif || true
            "
      - name: Upload Snyk SAST SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-results/snyk-sast.sarif
          category: snyk-sast
      - name: Upload Snyk SAST JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-sast-results-json
          path: snyk-results/snyk-sast.json

  snyk-sca:
    name: Snyk (SCA)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Create results directory
        run: mkdir -p snyk-sca-results
      - name: Run Snyk SCA Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -f package.json ]; then npm install; fi
          docker run --rm -v "$(pwd):/project" -e SNYK_TOKEN \
            --entrypoint="" snyk/snyk:linux sh -c "
              set -e
              cd /project
              snyk auth $SNYK_TOKEN
              snyk test --all-projects --json-file-output=snyk-sca-results/snyk-sca.json --sarif-file-output=snyk-sca-results/snyk-sca.sarif || true
            "
      - name: Upload Snyk SCA SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-sca-results/snyk-sca.sarif
          category: snyk-sca
      - name: Upload Snyk SCA JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-sca-results-json
          path: snyk-sca-results/snyk-sca.json


  trivy-scans:
    name: Trivy (SCA, Misconfig, Secret, SBOM)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create Trivy output directory
        run: mkdir -p trivy-output
      - name: Run Trivy Scans
        run: |
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners vuln --format json --output /ws/trivy-output/vuln.json || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners vuln --format sarif --output /ws/trivy-output/vuln.sarif || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners secret --format json --output /ws/trivy-output/secrets.json || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners secret --format sarif --output /ws/trivy-output/secrets.sarif || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners misconfig --format json --output /ws/trivy-output/misconfig.json || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners misconfig --format sarif --output /ws/trivy-output/misconfig.sarif || true
      - name: Generate SBOM with Trivy
        run: |
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --format cyclonedx --output /ws/trivy-output/sbom.cyclonedx.json || true
      - name: Upload Trivy SARIF reports to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-output/
      - name: Upload All Trivy Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-output/

  trufflehog-secrets:
    name: TruffleHog (Secrets)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Run TruffleHog Scan
        run: |
          mkdir -p trufflehog-output
          # MODIFIED: Changed '--sarif' to the correct '--format sarif' and added '--output'.
          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest filesystem --directory /pwd --format json --output trufflehog-output/results.json || true
          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest filesystem --directory /pwd --format sarif --output trufflehog-output/results.sarif || true
      - name: Upload TruffleHog SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trufflehog-output/results.sarif
          category: trufflehog-secrets
      - name: Upload TruffleHog JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results-json
          path: trufflehog-output/results.json

  owasp-zap-dast:
    name: OWASP ZAP (DAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Start the application in the background
        run: |
          # IMPORTANT: Replace this with the command that starts your web application.
          python your_app_startup_file.py &
      - name: Wait for application to be ready
        run: sleep 30
      - name: Run ZAP Baseline Scan
        # MODIFIED: Updated action to a recent, stable version (v0.2.0)
        # and used specific inputs for reports instead of cmd_options.
        uses: ZAP/zap-baseline-scan@v0.2.0
        with:
          target: 'http://127.0.0.1:8080'
          report_sarif: 'zap-results.sarif'
          report_json: 'zap-results.json'
      - name: Upload ZAP SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-results.sarif
          category: owasp-zap-dast
      - name: Upload ZAP JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-results-json
          path: zap-results.json
