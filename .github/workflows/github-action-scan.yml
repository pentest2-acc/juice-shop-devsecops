name: Comprehensive Code Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  security-events: write

jobs:
  semgrep-sast:
    name: Semgrep (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep Scan
        run: |
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan --config auto --error --json > semgrep-results.json || true
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan --config auto --error --sarif > semgrep-results.sarif || true
      - name: Upload Semgrep SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep-sast
      - name: Upload JSON Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results-json
          path: semgrep-results.json

  snyk-sast:
    name: Snyk (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create results directory
        run: mkdir -p snyk-results
      - name: Run Snyk SAST Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker run --rm -v "$(pwd):/project" -e SNYK_TOKEN \
            --entrypoint="" snyk/snyk:linux sh -c "
              set -e
              cd /project && \
              snyk auth $SNYK_TOKEN && \
              snyk code test --json-file-output=snyk-results/snyk-sast.json --sarif-file-output=snyk-results/snyk-sast.sarif || true
            "
      - name: Upload Snyk SAST SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-results/snyk-sast.sarif
          category: snyk-sast
      - name: Upload Snyk SAST JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-sast-results-json
          path: snyk-results/snyk-sast.json

  snyk-sca:
    name: Snyk (SCA)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Create results directory
        run: mkdir -p snyk-sca-results
      - name: Run Snyk SCA Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -f package.json ]; then npm install; fi
          docker run --rm -v "$(pwd):/project" -e SNYK_TOKEN \
            --entrypoint="" snyk/snyk:linux sh -c "
              set -e
              cd /project
              snyk auth $SNYK_TOKEN
              snyk test --all-projects --json-file-output=snyk-sca-results/snyk-sca.json --sarif-file-output=snyk-sca-results/snyk-sca.sarif || true
            "
      - name: Upload Snyk SCA SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-sca-results/snyk-sca.sarif
          category: snyk-sca
      - name: Upload Snyk SCA JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-sca-results-json
          path: snyk-sca-results/snyk-sca.json

  trivy-scans:
    name: Trivy (SCA, Misconfig, Secret, SBOM)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create Trivy output directory
        run: mkdir -p trivy-output
      - name: Run Trivy Scans
        run: |
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners vuln --format json --output /ws/trivy-output/vuln.json || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners vuln --format sarif --output /ws/trivy-output/vuln.sarif || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners secret --format json --output /ws/trivy-output/secrets.json || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners secret --format sarif --output /ws/trivy-output/secrets.sarif || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners misconfig --format json --output /ws/trivy-output/misconfig.json || true
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --scanners misconfig --format sarif --output /ws/trivy-output/misconfig.sarif || true
      - name: Generate SBOM with Trivy
        run: |
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws --format cyclonedx --output /ws/trivy-output/sbom.cyclonedx.json || true
      - name: Upload Trivy Vulnerability SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-output/vuln.sarif
          category: trivy-vulnerabilities
        if: always()
      - name: Upload Trivy Secrets SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-output/secrets.sarif
          category: trivy-secrets
        if: always()
      - name: Upload Trivy Misconfig SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-output/misconfig.sarif
          category: trivy-misconfig
        if: always()
      - name: Upload All Trivy Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-output/

  trufflehog-secrets:
    name: TruffleHog (Secrets)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Create TruffleHog output directory
        run: mkdir -p trufflehog-output
      - name: Run TruffleHog Scan
        run: |
          # Run TruffleHog with JSON output
          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest filesystem --directory /pwd --json > trufflehog-output/results.json || true
      - name: Setup Python for SARIF conversion
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Convert TruffleHog JSON to SARIF
        run: |
          cat > convert_to_sarif.py << 'EOF'
          import json
          import sys
          from datetime import datetime

          def convert_trufflehog_to_sarif(json_file, sarif_file):
              try:
                  with open(json_file, 'r') as f:
                      content = f.read().strip()
                      if not content:
                          trufflehog_results = []
                      else:
                          # TruffleHog outputs one JSON object per line
                          trufflehog_results = []
                          for line in content.split('\n'):
                              if line.strip():
                                  try:
                                      trufflehog_results.append(json.loads(line))
                                  except json.JSONDecodeError:
                                      continue
              except FileNotFoundError:
                  trufflehog_results = []

              sarif_results = []
              
              for finding in trufflehog_results:
                  if not finding:
                      continue
                      
                  # Extract relevant information from TruffleHog finding
                  detector_name = finding.get('DetectorName', 'Unknown')
                  detector_type = finding.get('DetectorType', 'Unknown')
                  verified = finding.get('Verified', False)
                  source_metadata = finding.get('SourceMetadata', {})
                  
                  # Get file information
                  file_path = source_metadata.get('Data', {}).get('Filesystem', {}).get('file', 'Unknown')
                  line_number = source_metadata.get('Data', {}).get('Filesystem', {}).get('line', 1)
                  
                  # Create SARIF result
                  sarif_result = {
                      "ruleId": f"trufflehog-{detector_name.lower()}",
                      "ruleIndex": 0,
                      "message": {
                          "text": f"Potential {detector_name} secret detected{' (verified)' if verified else ''}"
                      },
                      "level": "error" if verified else "warning",
                      "locations": [
                          {
                              "physicalLocation": {
                                  "artifactLocation": {
                                      "uri": file_path
                                  },
                                  "region": {
                                      "startLine": max(1, int(line_number)),
                                      "startColumn": 1
                                  }
                              }
                          }
                      ],
                      "properties": {
                          "detectorType": detector_type,
                          "verified": verified,
                          "raw": finding.get('Raw', '')[:100] + '...' if len(finding.get('Raw', '')) > 100 else finding.get('Raw', '')
                      }
                  }
                  sarif_results.append(sarif_result)

              # Create SARIF document
              sarif_document = {
                  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
                  "version": "2.1.0",
                  "runs": [
                      {
                          "tool": {
                              "driver": {
                                  "name": "TruffleHog",
                                  "version": "3.0.0",
                                  "informationUri": "https://github.com/trufflesecurity/trufflehog",
                                  "rules": [
                                      {
                                          "id": "trufflehog-secret",
                                          "name": "Secret Detection",
                                          "shortDescription": {
                                              "text": "Potential secret or credential detected"
                                          },
                                          "fullDescription": {
                                              "text": "TruffleHog detected a potential secret or credential in the codebase"
                                          },
                                          "defaultConfiguration": {
                                              "level": "error"
                                          },
                                          "helpUri": "https://github.com/trufflesecurity/trufflehog"
                                      }
                                  ]
                              }
                          },
                          "results": sarif_results,
                          "columnKind": "utf16CodeUnits"
                      }
                  ]
              }

              with open(sarif_file, 'w') as f:
                  json.dump(sarif_document, f, indent=2)

          if __name__ == "__main__":
              convert_trufflehog_to_sarif('trufflehog-output/results.json', 'trufflehog-output/results.sarif')
              print(f"Converted TruffleHog results to SARIF format")
          EOF
          
          python convert_to_sarif.py
      - name: Upload TruffleHog SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trufflehog-output/results.sarif
          category: trufflehog-secrets
        if: always()
      - name: Upload TruffleHog JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results-json
          path: trufflehog-output/results.json

  owasp-zap-dast:
    name: OWASP ZAP (DAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Start the application in the background
        run: |
          # IMPORTANT: Replace this with the command that starts your web application.
          # For example: python app.py & or npm start &
          echo "Starting application..."
          # python your_app_startup_file.py &
          
          # For demonstration, we'll create a simple HTTP server
          python -m http.server 8080 &
          echo $! > app.pid
      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          sleep 10
          # Check if the application is running
          curl -f http://127.0.0.1:8080 || echo "Application may not be ready"
      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://127.0.0.1:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -l WARN -z "-silent"'
      - name: Create ZAP output directory
        run: mkdir -p zap-output
      - name: Copy ZAP results
        run: |
          # Copy ZAP results to our output directory
          if [ -f "report_html.html" ]; then cp "report_html.html" zap-output/; fi
          if [ -f "report_json.json" ]; then cp "report_json.json" zap-output/zap-results.json; fi
          if [ -f "report_md.md" ]; then cp "report_md.md" zap-output/; fi
          # Create a basic SARIF file for ZAP results
          cat > zap-output/zap-results.sarif << 'EOF'
          {
            "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "OWASP ZAP",
                    "version": "2.14.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
      - name: Upload ZAP SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-output/zap-results.sarif
          category: owasp-zap-dast
        if: always()
      - name: Upload ZAP Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: zap-output/
        if: always()
      - name: Stop application
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi
        if: always()
