owasp-zap-dast:
    name: OWASP ZAP (DAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Start the application in the background
        run: |
          echo "Starting the program"
          # IMPORTANT: Replace this with the command that starts your web application.
          # For example: python app.py & or npm start &
          
          # For demonstration, we'll create a simple HTTP server
          python -m http.server 8080 &
          echo $! > app.pid
          echo "Application started with PID: $(cat app.pid)"
      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          sleep 10
          # Test application availability
          for i in {1..5}; do
            if curl -f http://127.0.0.1:8080 >/dev/null 2>&1; then
              echo "‚úÖ Application is ready"
              break
            else
              echo "‚è≥ Waiting for application... (attempt $i/5)"
              sleep 5
            fi
          done
      - name: Run ZAP Baseline Scan
        run: |
          echo "üîç Starting OWASP ZAP Baseline Scan..."
          mkdir -p zap-output
          
          # Run ZAP baseline scan using Docker
          docker run -v $(pwd)/zap-output:/zap/wrk/:rw \
            --network="host" \
            -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t http://127.0.0.1:8080 \
            -J zap-report.json \
            -r zap-report.html \
            -x zap-report.xml \
            -w zap-report.md \
            -a \
            -j \
            -l WARN || true
          
          echo "‚úÖ ZAP scan completed"
          
          # List generated files
          echo "Generated ZAP files:"
          ls -la zap-output/
      - name: Process ZAP Results and Create SARIF
        run: |
          cat > zap_to_sarif.py << 'EOF'
          import json
          import xml.etree.ElementTree as ET
          import os
          from datetime import datetime

          def xml_to_sarif(xml_file, sarif_file):
              if not os.path.exists(xml_file):
                  print(f"XML file {xml_file} not found, creating empty SARIF")
                  create_empty_sarif(sarif_file)
                  return

              try:
                  tree = ET.parse(xml_file)
                  root = tree.getroot()
                  
                  sarif_results = []
                  rules = {}
                  
                  # Parse ZAP XML report
                  for site in root.findall('.//site'):
                      site_name = site.get('name', 'Unknown')
                      
                      for alert in site.findall('.//alertitem'):
                          plugin_id = alert.find('pluginid')
                          alert_name = alert.find('name')
                          risk_desc = alert.find('riskdesc')
                          desc = alert.find('desc')
                          uri = alert.find('uri')
                          
                          if plugin_id is not None and alert_name is not None:
                              rule_id = f"zap-{plugin_id.text}"
                              
                              # Extract risk level
                              risk_level = "warning"
                              if risk_desc is not None:
                                  risk_text = risk_desc.text.lower() if risk_desc.text else ""
                                  if "high" in risk_text:
                                      risk_level = "error"
                                  elif "medium" in risk_text:
                                      risk_level = "warning"
                                  elif "low" in risk_text:
                                      risk_level = "note"
                              
                              # Add rule if not exists
                              if rule_id not in rules:
                                  rules[rule_id] = {
                                      "id": rule_id,
                                      "name": alert_name.text if alert_name.text else "Unknown Alert",
                                      "shortDescription": {
                                          "text": alert_name.text if alert_name.text else "Security Alert"
                                      },
                                      "fullDescription": {
                                          "text": desc.text if desc and desc.text else "OWASP ZAP detected a security issue"
                                      },
                                      "defaultConfiguration": {
                                          "level": riskname: Comprehensive Code Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  security-events: write

jobs:
  semgrep-sast:
    name: Semgrep (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep Scan
        run: |
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan --config auto --error --json > semgrep-results.json || true
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan --config auto --error --sarif > semgrep-results.sarif || true
      - name: Upload Semgrep SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep-sast
      - name: Upload JSON Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results-json
          path: semgrep-results.json

  snyk-sast:
    name: Snyk (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create results directory
        run: mkdir -p snyk-results
      - name: Run Snyk SAST Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          docker run --rm -v "$(pwd):/project" -e SNYK_TOKEN \
            --entrypoint="" snyk/snyk:linux sh -c "
              set -e
              cd /project && \
              snyk auth $SNYK_TOKEN && \
              snyk code test --json-file-output=snyk-results/snyk-sast.json --sarif-file-output=snyk-results/snyk-sast.sarif || true
            "
      - name: Upload Snyk SAST SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-results/snyk-sast.sarif
          category: snyk-sast
      - name: Upload Snyk SAST JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-sast-results-json
          path: snyk-results/snyk-sast.json

  snyk-sca:
    name: Snyk (SCA)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Create results directory
        run: mkdir -p snyk-sca-results
      - name: Run Snyk SCA Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -f package.json ]; then npm install; fi
          docker run --rm -v "$(pwd):/project" -e SNYK_TOKEN \
            --entrypoint="" snyk/snyk:linux sh -c "
              set -e
              cd /project
              snyk auth $SNYK_TOKEN
              snyk test --all-projects --json-file-output=snyk-sca-results/snyk-sca.json --sarif-file-output=snyk-sca-results/snyk-sca.sarif || true
            "
      - name: Upload Snyk SCA SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-sca-results/snyk-sca.sarif
          category: snyk-sca
      - name: Upload Snyk SCA JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: snyk-sca-results-json
          path: snyk-sca-results/snyk-sca.json

  trivy-scans:
    name: Trivy (SCA, Misconfig, Secret, SBOM)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js (for package.json processing)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies (for better SBOM generation)
        run: |
          if [ -f package.json ]; then npm install; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Debug Repository Structure
        run: |
          echo "=== Repository Structure ==="
          find . -type f -name "*.json" -o -name "*.txt" -o -name "*.yml" -o -name "*.yaml" | head -20
          echo "=== Package Files ==="
          ls -la package*.json requirements*.txt go.mod Cargo.toml composer.json 2>/dev/null || echo "No package files found"
      - name: Run Trivy Vulnerability Scan (Fixed)
        run: |
          mkdir -p trivy-output
          echo "üîç Running Trivy Vulnerability Scan..."
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws \
            --scanners vuln \
            --format json \
            --output /ws/trivy-output/vuln.json \
            --severity HIGH,CRITICAL || true
          
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws \
            --scanners vuln \
            --format sarif \
            --output /ws/trivy-output/vuln.sarif \
            --severity HIGH,CRITICAL || true
            
          echo "‚úÖ Vulnerability scan completed"
      - name: Run Trivy Secret Scan (Enhanced)
        run: |
          echo "üîç Running Trivy Secret Scan..."
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws \
            --scanners secret \
            --format json \
            --output /ws/trivy-output/secrets.json || true
          
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws \
            --scanners secret \
            --format sarif \
            --output /ws/trivy-output/secrets.sarif || true
            
          echo "‚úÖ Secret scan completed"
      - name: Run Trivy Misconfiguration Scan
        run: |
          echo "üîç Running Trivy Misconfiguration Scan..."
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws \
            --scanners misconfig \
            --format json \
            --output /ws/trivy-output/misconfig.json || true
          
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws \
            --scanners misconfig \
            --format sarif \
            --output /ws/trivy-output/misconfig.sarif || true
            
          echo "‚úÖ Misconfiguration scan completed"
      - name: Generate Enhanced SBOM
        run: |
          echo "üìã Generating Enhanced SBOM..."
          # Generate CycloneDX SBOM
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws \
            --format cyclonedx \
            --output /ws/trivy-output/sbom.cyclonedx.json || true
          
          # Generate SPDX SBOM
          docker run --rm -v "$(pwd):/ws" aquasec/trivy:latest fs /ws \
            --format spdx-json \
            --output /ws/trivy-output/sbom.spdx.json || true
            
          echo "‚úÖ SBOM generation completed"
      - name: Create Comprehensive Security Summary
        run: |
          cat > trivy-output/security_summary.sh << 'EOF'
          #!/bin/bash
          echo "=== Security Scan Summary ==="
          echo "=== TRIVY SECURITY SCAN RESULTS ==="
          
          # Count vulnerabilities
          if [ -f "vuln.json" ]; then
            VULN_COUNT=$(jq -r '.Results[]?.Vulnerabilities // [] | length' vuln.json 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
            echo "üî¥ Vulnerabilities: $VULN_COUNT"
          else
            echo "üî¥ Vulnerabilities: 0"
          fi
          
          # Count secrets
          if [ -f "secrets.json" ]; then
            SECRET_COUNT=$(jq -r '.Results[]?.Secrets // [] | length' secrets.json 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
            echo "üîë Secrets: $SECRET_COUNT"
          else
            echo "üîë Secrets: 0"
          fi
          
          # Count misconfigurations
          if [ -f "misconfig.json" ]; then
            MISCONFIG_COUNT=$(jq -r '.Results[]?.Misconfigurations // [] | length' misconfig.json 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
            echo "‚öôÔ∏è Misconfigurations: $MISCONFIG_COUNT"
          else
            echo "‚öôÔ∏è Misconfigurations: 0"
          fi
          EOF
          
          cd trivy-output
          chmod +x security_summary.sh
          ./security_summary.sh
      - name: Upload Trivy Vulnerability SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-output/vuln.sarif
          category: trivy-vulnerabilities
        if: always()
      - name: Upload Trivy Secrets SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-output/secrets.sarif
          category: trivy-secrets
        if: always()
      - name: Upload Trivy Misconfig SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-output/misconfig.sarif
          category: trivy-misconfig
        if: always()
      - name: Upload Trivy Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-output/

  trufflehog-secrets:
    name: TruffleHog (Secrets)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Create TruffleHog output directory
        run: mkdir -p trufflehog-output
      - name: Run TruffleHog Scan
        run: |
          echo "üîç TruffleHog: Unearth your secrets. üîçüîë"
          echo "=== TruffleHog Scan Starting ==="
          
          # Run TruffleHog with JSON output
          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest filesystem --directory /pwd --json > trufflehog-output/results.json || true
          
          echo "=== TruffleHog Scan Completed ==="
          
          # Display findings summary
          if [ -s trufflehog-output/results.json ]; then
            echo "Found unverified result üîçüîë‚ùì"
            echo "Processing TruffleHog results..."
            
            # Count findings by detector type
            python3 -c "
          import json, sys
          try:
              with open('trufflehog-output/results.json', 'r') as f:
                  findings = []
                  for line in f:
                      if line.strip():
                          try:
                              findings.append(json.loads(line))
                          except:
                              continue
              
              detectors = {}
              verified_count = 0
              total_count = len(findings)
              
              for finding in findings:
                  detector = finding.get('DetectorName', 'Unknown')
                  verified = finding.get('Verified', False)
                  if verified:
                      verified_count += 1
                  detectors[detector] = detectors.get(detector, 0) + 1
              
              print(f'Total findings: {total_count}')
              print(f'Verified secrets: {verified_count}')
              print(f'Unverified secrets: {total_count - verified_count}')
              
              if detectors:
                  print('Detector breakdown:')
                  for detector, count in sorted(detectors.items()):
                      print(f'  {detector}: {count}')
          except Exception as e:
              print('Error processing results:', str(e))
          "
          else
            echo "No secrets found or scan failed"
          fi
      - name: Setup Python for SARIF conversion
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Convert TruffleHog JSON to SARIF
        run: |
          cat > convert_to_sarif.py << 'EOF'
          import json
          import sys
          from datetime import datetime
          import os

          def convert_trufflehog_to_sarif(json_file, sarif_file):
              try:
                  with open(json_file, 'r') as f:
                      content = f.read().strip()
                      if not content:
                          trufflehog_results = []
                      else:
                          # TruffleHog outputs one JSON object per line
                          trufflehog_results = []
                          for line in content.split('\n'):
                              if line.strip():
                                  try:
                                      trufflehog_results.append(json.loads(line))
                                  except json.JSONDecodeError:
                                      continue
              except FileNotFoundError:
                  trufflehog_results = []

              sarif_results = []
              rules = {}
              
              for finding in trufflehog_results:
                  if not finding:
                      continue
                      
                  # Extract relevant information from TruffleHog finding
                  detector_name = finding.get('DetectorName', 'Unknown')
                  detector_type = finding.get('DetectorType', 'Unknown')
                  verified = finding.get('Verified', False)
                  source_metadata = finding.get('SourceMetadata', {})
                  
                  # Get file information
                  data = source_metadata.get('Data', {})
                  filesystem_data = data.get('Filesystem', {}) if data else {}
                  file_path = filesystem_data.get('file', 'Unknown')
                  line_number = filesystem_data.get('line', 1)
                  
                  # Clean up file path
                  if file_path.startswith('/pwd/'):
                      file_path = file_path[5:]  # Remove /pwd/ prefix
                  
                  rule_id = f"trufflehog-{detector_name.lower().replace(' ', '-')}"
                  
                  # Add rule definition
                  if rule_id not in rules:
                      rules[rule_id] = {
                          "id": rule_id,
                          "name": f"{detector_name} Secret Detection",
                          "shortDescription": {
                              "text": f"Potential {detector_name} secret detected"
                          },
                          "fullDescription": {
                              "text": f"TruffleHog detected a potential {detector_name} secret or credential in the codebase"
                          },
                          "defaultConfiguration": {
                              "level": "error" if verified else "warning"
                          },
                          "helpUri": "https://github.com/trufflesecurity/trufflehog",
                          "properties": {
                              "tags": ["security", "secret", detector_type.lower()],
                              "precision": "high" if verified else "medium"
                          }
                      }
                  
                  # Create SARIF result
                  sarif_result = {
                      "ruleId": rule_id,
                      "ruleIndex": list(rules.keys()).index(rule_id),
                      "message": {
                          "text": f"Potential {detector_name} secret detected{' (verified)' if verified else ' (unverified)'}"
                      },
                      "level": "error" if verified else "warning",
                      "locations": [
                          {
                              "physicalLocation": {
                                  "artifactLocation": {
                                      "uri": file_path
                                  },
                                  "region": {
                                      "startLine": max(1, int(line_number)),
                                      "startColumn": 1
                                  }
                              }
                          }
                      ],
                      "properties": {
                          "detectorType": detector_type,
                          "verified": verified,
                          "detectorName": detector_name
                      }
                  }
                  sarif_results.append(sarif_result)

              # Create SARIF document
              sarif_document = {
                  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
                  "version": "2.1.0",
                  "runs": [
                      {
                          "tool": {
                              "driver": {
                                  "name": "TruffleHog",
                                  "version": "3.88.34",
                                  "informationUri": "https://github.com/trufflesecurity/trufflehog",
                                  "rules": list(rules.values())
                              }
                          },
                          "results": sarif_results,
                          "columnKind": "utf16CodeUnits"
                      }
                  ]
              }

              with open(sarif_file, 'w') as f:
                  json.dump(sarif_document, f, indent=2)
              
              return len(sarif_results)

          if __name__ == "__main__":
              result_count = convert_trufflehog_to_sarif('trufflehog-output/results.json', 'trufflehog-output/results.sarif')
              print(f"TruffleHog found {result_count} potential secrets")
              print("Converted TruffleHog results to SARIF format")
          EOF
          
          python convert_to_sarif.py
      - name: Display TruffleHog Summary
        run: |
          echo "=== TruffleHog Summary ==="
          if [ -s trufflehog-output/results.json ]; then
            # Create detailed summary
            python3 -c "
          import json
          findings = []
          try:
              with open('trufflehog-output/results.json', 'r') as f:
                  for line in f:
                      if line.strip():
                          try:
                              findings.append(json.loads(line))
                          except:
                              continue
          except:
              pass
          
          if findings:
              print('=== DETAILED FINDINGS ===')
              for i, finding in enumerate(findings[:5], 1):  # Show first 5 findings
                  detector = finding.get('DetectorName', 'Unknown')
                  verified = '‚úÖ VERIFIED' if finding.get('Verified') else '‚ùì UNVERIFIED'
                  file_info = finding.get('SourceMetadata', {}).get('Data', {}).get('Filesystem', {})
                  file_path = file_info.get('file', 'Unknown').replace('/pwd/', '')
                  line_num = file_info.get('line', 'Unknown')
                  
                  print(f'{i}. {detector} - {verified}')
                  print(f'   File: {file_path}')
                  print(f'   Line: {line_num}')
                  print()
              
              if len(findings) > 5:
                  print(f'... and {len(findings) - 5} more findings')
          else:
              print('No secrets detected')
          "
          else
            echo "No TruffleHog results to display"
          fi
      - name: Upload TruffleHog SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trufflehog-output/results.sarif
          category: trufflehog-secrets
        if: always()
      - name: Upload TruffleHog JSON as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results-json
          path: trufflehog-output/results.json

  owasp-zap-dast:
    name: OWASP ZAP (DAST)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Start the application in the background
        run: |
          # IMPORTANT: Replace this with the command that starts your web application.
          # For example: python app.py & or npm start &
          echo "Starting application..."
          # python your_app_startup_file.py &
          
          # For demonstration, we'll create a simple HTTP server
          python -m http.server 8080 &
          echo $! > app.pid
      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          sleep 10
          # Check if the application is running
          curl -f http://127.0.0.1:8080 || echo "Application may not be ready"
      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://127.0.0.1:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -l WARN -z "-silent"'
      - name: Create ZAP output directory
        run: mkdir -p zap-output
      - name: Copy ZAP results
        run: |
          # Copy ZAP results to our output directory
          if [ -f "report_html.html" ]; then cp "report_html.html" zap-output/; fi
          if [ -f "report_json.json" ]; then cp "report_json.json" zap-output/zap-results.json; fi
          if [ -f "report_md.md" ]; then cp "report_md.md" zap-output/; fi
          # Create a basic SARIF file for ZAP results
          cat > zap-output/zap-results.sarif << 'EOF'
          {
            "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "OWASP ZAP",
                    "version": "2.14.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
      - name: Upload ZAP SARIF to Security Tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap-output/zap-results.sarif
          category: owasp-zap-dast
        if: always()
      - name: Upload ZAP Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: zap-output/
        if: always()
      - name: Stop application
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
            rm app.pid
          fi
        if: always()
