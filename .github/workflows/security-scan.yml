name: Code Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  semgrep-scan:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Semgrep Scan
        run: |
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan \
            --config auto \
            --error \
            --json > semgrep-results.json || true
      
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

  snyk-scan:
    name: Snyk Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Create results directory
        run: mkdir -p snyk-results
      
      # Use Snyk CLI directly for better control
      - name: Set up Snyk
        uses: snyk/actions/setup@master
        
      - name: Authenticate with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          # Explicitly authenticate with Snyk
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk config set api=${{ secrets.SNYK_TOKEN }}
          # Verify authentication
          snyk --version
          echo "Snyk authentication completed"
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      # Install dependencies properly for Juice Shop
      - name: Install dependencies if present
        run: |
          if [ -f package.json ]; then
            # For Juice Shop, we need to use npm install (not npm ci)
            npm install || echo "Failed to install dependencies, will try with Snyk anyway"
          fi
        continue-on-error: true
      
      - name: Run Snyk SAST Scan (Code Analysis)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "=== Running Snyk SAST Scan (Code Analysis) ==="
          
          # First, verify we're authenticated
          echo "Verifying Snyk authentication..."
          snyk --version
          
          # Run Snyk Code with explicit project path - ensure to monitor output
          echo "Running main code scan..."
          snyk code test --sarif --sarif-file-output=snyk-results/sast-results.sarif || true
          snyk code test --json --org=${{ secrets.SNYK_ORG_ID }} > snyk-results/sast-results.json || true
          
          # Check if SARIF results were generated (preferred format for code issues)
          if [ -s snyk-results/sast-results.sarif ]; then
            echo "SAST scan completed successfully with SARIF output."
            # Get a count of issues from the SARIF file
            SARIF_ISSUES=$(grep -c '"level": "error"' snyk-results/sast-results.sarif || echo "0")
            echo "Found approximately $SARIF_ISSUES issues in SARIF output"
          else
            echo "SARIF output not generated."
          fi
          
          # Check if JSON results were generated
          if [ -s snyk-results/sast-results.json ]; then
            echo "SAST scan completed successfully with JSON output."
            echo "Found issues:" 
            grep -c '"severity":' snyk-results/sast-results.json || echo "0"
          else 
            echo "JSON output not generated. Trying alternative method..."
            
            # Try with explicit options for code scanning
            echo "Trying with explicit code scan options..."
            snyk code test --json --org=${{ secrets.SNYK_ORG_ID }} --project-name="juice-shop-code" > snyk-results/sast-results.json || true
            
            if [ -s snyk-results/sast-results.json ]; then
              echo "SAST scan completed with project name option."
              echo "Found issues:" 
              grep -c '"severity":' snyk-results/sast-results.json || echo "0"
            else
              echo "Second attempt failed. Trying Docker approach..."
              
              # Alternative approach - use docker directly
              docker run --rm -v "$(pwd):/project" -e SNYK_TOKEN \
                snyk/snyk-cli code test --json > snyk-results/sast-results.json || true
              
              if [ -s snyk-results/sast-results.json ]; then
                echo "SAST scan completed with Docker method."
                echo "Found issues:" 
                grep -c '"severity":' snyk-results/sast-results.json || echo "0"
              else
                echo "All SAST scan methods failed to produce results with vulnerabilities."
                echo "Generating a placeholder file for pipeline continuity..."
                echo '{"results":[]}' > snyk-results/sast-results.json
              fi
            fi
          fi
      
      - name: Run Snyk SCA Scan (Dependencies)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "=== Running Snyk SCA Scan (Dependencies) ==="
          
          # Run with specific project file for Juice Shop
          snyk test --file=package.json --json --org=${{ secrets.SNYK_ORG_ID }} > snyk-results/sca-results.json || true
          
          # Check if results were generated
          if [ -s snyk-results/sca-results.json ]; then
            echo "SCA scan completed successfully."
            echo "Found vulnerabilities:" 
            grep -c '"severity":' snyk-results/sca-results.json || echo "0"
          else
            echo "First SCA scan attempt failed. Trying with all-projects flag..."
            
            # Try with all-projects flag
            snyk test --all-projects --json --org=${{ secrets.SNYK_ORG_ID }} > snyk-results/sca-results.json || true
            
            if [ -s snyk-results/sca-results.json ]; then
              echo "SCA scan completed with all-projects flag."
              echo "Found vulnerabilities:" 
              grep -c '"severity":' snyk-results/sca-results.json || echo "0"
            else
              echo "Both SCA scan methods failed to produce results."
            fi
          fi
          
      - name: Generate Snyk Summary
        run: |
          echo "=== Snyk Scan Summary ===" > snyk-results/summary.txt
          echo "SAST Results:" >> snyk-results/summary.txt
          if [ -f snyk-results/sast-results.json ] && [ -s snyk-results/sast-results.json ]; then
            SAST_VULNS=$(grep -c '"severity":' snyk-results/sast-results.json || echo "0")
            echo "- Found approximately $SAST_VULNS code issues" >> snyk-results/summary.txt
          else
            echo "- No SAST results found" >> snyk-results/summary.txt
          fi
          
          echo "SCA Results:" >> snyk-results/summary.txt
          if [ -f snyk-results/sca-results.json ] && [ -s snyk-results/sca-results.json ]; then
            SCA_VULNS=$(grep -c '"severity":' snyk-results/sca-results.json || echo "0")
            echo "- Found approximately $SCA_VULNS dependency vulnerabilities" >> snyk-results/summary.txt
          else
            echo "- No SCA results found" >> snyk-results/summary.txt
          fi
          
          cat snyk-results/summary.txt
      
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: snyk-results/

  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy Vulnerability FS Scan
        run: |
          mkdir -p trivy-output
          # Run with human-readable output first for summary
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --scanners vuln \
            --security-checks vuln \
            --no-progress || true
          
          # Then run with JSON output for artifact
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --scanners vuln \
            --security-checks vuln \
            --format json \
            --output /src/trivy-output/trivy-vuln-results.json || true
      
      - name: Run Trivy Misconfig & Secret Scan
        run: |
          # Using --scanners misconfig instead of config (which is deprecated)
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --scanners misconfig,secret \
            --security-checks config,secret \
            --format table || true
          
          # JSON output for artifact
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --scanners misconfig,secret \
            --security-checks config,secret \
            --format json \
            --output /src/trivy-output/trivy-misconfig-results.json || true
      
      - name: Generate SBOM
        run: |
          # Generate SBOM directly without checking cyclonedx support
          # For npm projects like Juice Shop
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --format cyclonedx \
            --output /src/trivy-output/sbom.cyclonedx.json || true
            
          # Alternative SBOM format (JSON)
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --format json \
            --output /src/trivy-output/sbom.json || true
            
          # Check if either SBOM was generated
          if [ -s trivy-output/sbom.cyclonedx.json ] || [ -s trivy-output/sbom.json ]; then
            echo "SBOM generation successful"
          else
            echo "SBOM generation failed with standard methods, trying direct NPM approach"
            
            # Use NPM's built-in capability if package.json exists
            if [ -f package.json ]; then
              npm list --json > trivy-output/npm-sbom.json || true
              echo "Generated NPM dependency SBOM as fallback"
            fi
          fi
      
      - name: Upload Trivy Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-output/

  trufflehog-scan:
    name: TruffleHog Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git history scanning
      
      - name: Run TruffleHog
        run: |
          mkdir -p trufflehog-output
          
          # Run with human-readable output first
          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
            filesystem --directory /pwd || true
          
          # Then run with JSON output for artifact
          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
            filesystem --directory /pwd --json > trufflehog-output/trufflehog-results.json || true
      
      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-output/trufflehog-results.json
