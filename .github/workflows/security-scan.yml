name: Code Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  semgrep-scan:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep Scan
        run: |
          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan \
            --config auto \
            --error \
            --json > semgrep-results.json || true

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json

  snyk-scan:
    name: Snyk SAST Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create results directory
        run: mkdir -p snyk-results

      - name: Debug Repository Contents
        run: |
          echo "=== Repository Debug Information ==="
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" \) | head -20
          echo "Total supported files found:"
          find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" -o -name "*.jsx" -o -name "*.tsx" \) | wc -l
          echo "Package files:"
          find . -name "package.json" -o -name "requirements.txt" -o -name "pom.xml" -o -name "Gemfile" -o -name "go.mod"

      - name: Run Snyk SAST Scan (Similar to Jenkins)
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          SUPPORTED_FILES=$(find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" -o -name "*.jsx" -o -name "*.tsx" \) | wc -l)

          if [ "$SUPPORTED_FILES" -eq 0 ]; then
            echo "⚠️  No supported source code files found in repository"
            echo '{"vulnerabilities":[],"summary":"No supported files found"}' > snyk-results/snyk-results.json
          else
            docker run --rm \
              -v "$(pwd):/project" \
              -e SNYK_TOKEN="${{ secrets.SNYK_TOKEN }}" \
              --entrypoint="" \
              snyk/snyk:linux \
              sh -c "
                cd /project && \
                snyk auth $SNYK_TOKEN && \
                snyk code test --json-file-output=snyk-results/snyk-results.json || true
              "

            if [ -f snyk-results/snyk-results.json ]; then
              echo "✅ Snyk SAST scan completed successfully"
              if grep -q '"error"' snyk-results/snyk-results.json; then
                echo "❌ Scan completed with errors:"
                cat snyk-results/snyk-results.json
              else
                VULN_COUNT=$(jq -r 'if .vulnerabilities then (.vulnerabilities | length) else 0 end' snyk-results/snyk-results.json || echo "0")
                echo "Found $VULN_COUNT code vulnerabilities"
              fi
            else
              echo '{"vulnerabilities":[],"summary":"Scan failed to generate results"}' > snyk-results/snyk-results.json
            fi
          fi

      - name: Upload Snyk Results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: snyk-results/

  snyk-SCA-scan:
    name: Snyk SCA Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create results directory
        run: mkdir -p snyk-SCA-results

      - name: Debug Repository Contents
        run: |
          echo "=== Repository Debug Information ==="
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          find . -type f -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" | head -20
          echo "Total supported files found:"
          find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" -o -name "*.jsx" -o -name "*.tsx" \) | wc -l
          echo "Package files:"
          find . -name "package.json" -o -name "requirements.txt" -o -name "pom.xml" -o -name "Gemfile" -o -name "go.mod"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          if [ -f package.json ]; then
            npm install
          fi

      - name: Run Snyk SCA Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          SUPPORTED_FILES=$(find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" -o -name "*.jsx" -o -name "*.tsx" \) | wc -l)

          if [ "$SUPPORTED_FILES" -eq 0 ]; then
            echo '{"vulnerabilities":[],"summary":"No supported files found"}' > snyk-SCA-results/snyk-SCA-results.json
          else
            docker run --rm \
              -v "$(pwd):/project" \
              -e SNYK_TOKEN="${{ secrets.SNYK_TOKEN }}" \
              --entrypoint="" \
              snyk/snyk:linux \
              sh -c "
                cd /project && \
                snyk auth $SNYK_TOKEN && \
                snyk test --json-file-output=snyk-SCA-results/snyk-SCA-results.json || true
              "
          fi

      - name: Upload Snyk SCA Results
        uses: actions/upload-artifact@v4
        with:
          name: snyk-SCA-results
          path: snyk-SCA-results/

  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy Vulnerability FS Scan
        run: |
          mkdir -p trivy-output
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --scanners vuln \
            --security-checks vuln \
            --no-progress || true

          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --scanners vuln \
            --security-checks vuln \
            --format json \
            --output /src/trivy-output/trivy-vuln-results.json || true

      - name: Run Trivy Misconfig & Secret Scan
        run: |
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --scanners misconfig,secret \
            --security-checks config,secret \
            --format table || true

          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --scanners misconfig,secret \
            --security-checks config,secret \
            --format json \
            --output /src/trivy-output/trivy-misconfig-results.json || true

      - name: Generate SBOM
        run: |
          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --format cyclonedx \
            --output /src/trivy-output/sbom.cyclonedx.json || true

          docker run --rm -v "$(pwd):/src" \
            -v /tmp/trivy-cache:/root/.cache \
            aquasec/trivy:latest fs /src \
            --format json \
            --output /src/trivy-output/sbom.json || true

          if [ ! -s trivy-output/sbom.cyclonedx.json ] && [ ! -s trivy-output/sbom.json ]; then
            if [ -f package.json ]; then
              npm list --json > trivy-output/npm-sbom.json || true
            fi
          fi

      - name: Upload Trivy Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-output/

  trufflehog-scan:
    name: TruffleHog Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        run: |
          mkdir -p trufflehog-output

          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
            filesystem --directory /pwd || true

          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \
            filesystem --directory /pwd --json > trufflehog-output/trufflehog-results.json || true

      - name: Upload TruffleHog Results
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-output/trufflehog-results.json
