name: Code Security Scan
 
on:

  push:

    branches: [ main, master ]

  pull_request:

    branches: [ main, master ]
 
permissions:

  contents: read
 
jobs:

  semgrep-scan:

    name: Semgrep SAST

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - name: Run Semgrep Scan

        run: |

          docker run --rm -v "$(pwd):/src" returntocorp/semgrep semgrep scan \

            --config auto \

            --error \

            --json > semgrep-results.json || true

      - name: Upload Results

        uses: actions/upload-artifact@v4

        with:

          name: semgrep-results

          path: semgrep-results.json
 
  snyk-scan:

    name: Snyk SAST Scan

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - name: Create results directory

        run: mkdir -p snyk-results

      - name: Debug Repository Contents

        run: |

          echo "=== Repository Debug Information ==="

          echo "Current directory: $(pwd)"

          echo "Repository contents:"

          find . -type f -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" | head -20

          echo "Total supported files found:"

          find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" -o -name "*.jsx" -o -name "*.tsx" \) | wc -l

          echo "Package files:"

          find . -name "package.json" -o -name "requirements.txt" -o -name "pom.xml" -o -name "Gemfile" -o -name "go.mod"
 
      - name: Run Snyk SAST Scan (Similar to Jenkins)

        env:

          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        run: |

          echo "=== Running Snyk SAST Code Scan (Jenkins Style) ==="

          # Check if we have supported files before running Snyk

          SUPPORTED_FILES=$(find . -type f \( -name "*.js" -o -name "*.ts" -o -name "*.py" -o -name "*.java" -o -name "*.php" -o -name "*.rb" -o -name "*.go" -o -name "*.cs" -o -name "*.cpp" -o -name "*.c" -o -name "*.jsx" -o -name "*.tsx" \) | wc -l)

          if [ "$SUPPORTED_FILES" -eq 0 ]; then

            echo "⚠️  No supported source code files found in repository"

            echo "Snyk Code supports: JavaScript, TypeScript, Python, Java, PHP, Ruby, Go, C#, C/C++"

            echo "Creating empty results file..."

            echo '{"vulnerabilities":[],"summary":"No supported files found"}' > snyk-results/snyk-results.json

          else

            echo "✅ Found $SUPPORTED_FILES supported source code files"

            # Run Snyk using Docker (similar to Jenkins approach)

            docker run --rm \

              -v "$(pwd):/project" \

              -e SNYK_TOKEN="${{ secrets.SNYK_TOKEN }}" \

              --entrypoint="" \

              snyk/snyk:linux \

              sh -c "

                cd /project && \

                snyk auth ${{ secrets.SNYK_TOKEN }} && \

                echo 'Current directory contents:' && \

                ls -la && \

                echo 'Running Snyk Code scan...' && \

                snyk code test --json-file-output=snyk-results/snyk-results.json || true

              "

            # Check if results were generated

            if [ -f snyk-results/snyk-results.json ]; then

              echo "✅ Snyk SAST scan completed successfully"

              echo "Results saved to snyk-results.json"

              # Display summary of findings

              if [ -s snyk-results/snyk-results.json ]; then

                # Check if it's an error response or actual results

                if grep -q '"error"' snyk-results/snyk-results.json; then

                  echo "❌ Scan completed with errors:"

                  cat snyk-results/snyk-results.json

                else

                  # Count vulnerabilities from Snyk JSON output

                  VULN_COUNT=$(jq -r 'if .vulnerabilities then (.vulnerabilities | length) else 0 end' snyk-results/snyk-results.json 2>/dev/null || echo "0")

                  echo "Found $VULN_COUNT code vulnerabilities"

                  # Show severity breakdown if vulnerabilities exist

                  if [ "$VULN_COUNT" != "0" ]; then

                    HIGH_COUNT=$(jq -r '[.vulnerabilities[] | select(.severity == "high")] | length' snyk-results/snyk-results.json 2>/dev/null || echo "0")

                    MEDIUM_COUNT=$(jq -r '[.vulnerabilities[] | select(.severity == "medium")] | length' snyk-results/snyk-results.json 2>/dev/null || echo "0")

                    LOW_COUNT=$(jq -r '[.vulnerabilities[] | select(.severity == "low")] | length' snyk-results/snyk-results.json 2>/dev/null || echo "0")

                    echo "Severity breakdown: High: $HIGH_COUNT, Medium: $MEDIUM_COUNT, Low: $LOW_COUNT"

                  fi

                fi

              else

                echo "Scan completed but no results generated"

              fi

            else

              echo "❌ Snyk scan failed to generate results file"

              # Create empty results file for consistency

              echo '{"vulnerabilities":[],"summary":"Scan failed to generate results"}' > snyk-results/snyk-results.json

            fi

          fi

      - name: Upload Snyk Results

        uses: actions/upload-artifact@v4

        with:

          name: snyk-results

          path: snyk-results/
 
  trivy-scan:

    name: Trivy Scan

    runs-on: ubuntu-latest

    timeout-minutes: 15

    steps:

      - uses: actions/checkout@v4

      - name: Run Trivy Vulnerability FS Scan

        run: |

          mkdir -p trivy-output

          # Run with human-readable output first for summary

          docker run --rm -v "$(pwd):/src" \

            -v /tmp/trivy-cache:/root/.cache \

            aquasec/trivy:latest fs /src \

            --scanners vuln \

            --security-checks vuln \

            --no-progress || true

          # Then run with JSON output for artifact

          docker run --rm -v "$(pwd):/src" \

            -v /tmp/trivy-cache:/root/.cache \

            aquasec/trivy:latest fs /src \

            --scanners vuln \

            --security-checks vuln \

            --format json \

            --output /src/trivy-output/trivy-vuln-results.json || true

      - name: Run Trivy Misconfig & Secret Scan

        run: |

          # Using --scanners misconfig instead of config (which is deprecated)

          docker run --rm -v "$(pwd):/src" \

            -v /tmp/trivy-cache:/root/.cache \

            aquasec/trivy:latest fs /src \

            --scanners misconfig,secret \

            --security-checks config,secret \

            --format table || true

          # JSON output for artifact

          docker run --rm -v "$(pwd):/src" \

            -v /tmp/trivy-cache:/root/.cache \

            aquasec/trivy:latest fs /src \

            --scanners misconfig,secret \

            --security-checks config,secret \

            --format json \

            --output /src/trivy-output/trivy-misconfig-results.json || true

      - name: Generate SBOM

        run: |

          # Generate SBOM directly without checking cyclonedx support

          # For npm projects like Juice Shop

          docker run --rm -v "$(pwd):/src" \

            -v /tmp/trivy-cache:/root/.cache \

            aquasec/trivy:latest fs /src \

            --format cyclonedx \

            --output /src/trivy-output/sbom.cyclonedx.json || true

          # Alternative SBOM format (JSON)

          docker run --rm -v "$(pwd):/src" \

            -v /tmp/trivy-cache:/root/.cache \

            aquasec/trivy:latest fs /src \

            --format json \

            --output /src/trivy-output/sbom.json || true

          # Check if either SBOM was generated

          if [ -s trivy-output/sbom.cyclonedx.json ] || [ -s trivy-output/sbom.json ]; then

            echo "SBOM generation successful"

          else

            echo "SBOM generation failed with standard methods, trying direct NPM approach"

            # Use NPM's built-in capability if package.json exists

            if [ -f package.json ]; then

              npm list --json > trivy-output/npm-sbom.json || true

              echo "Generated NPM dependency SBOM as fallback"

            fi

          fi

      - name: Upload Trivy Results

        uses: actions/upload-artifact@v4

        with:

          name: trivy-results

          path: trivy-output/
 
  trufflehog-scan:

    name: TruffleHog Secrets Scan

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

        with:

          fetch-depth: 0  # Required for git history scanning

      - name: Run TruffleHog

        run: |

          mkdir -p trufflehog-output

          # Run with human-readable output first

          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \

            filesystem --directory /pwd || true

          # Then run with JSON output for artifact

          docker run --rm -v "$(pwd):/pwd" trufflesecurity/trufflehog:latest \

            filesystem --directory /pwd --json > trufflehog-output/trufflehog-results.json || true

      - name: Upload TruffleHog Results

        uses: actions/upload-artifact@v4

        with:

          name: trufflehog-results

          path: trufflehog-output/trufflehog-results.json
 
